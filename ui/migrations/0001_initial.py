# Generated by Django 3.0.5 on 2020-05-25 12:09

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Authorities',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='It is the name of Regulatory Authority preferably full name with short form in brackets for example Food Safety Standards Institue(FSSI), Beaureau of Indian Standards(BIS) etc.', max_length=255, unique=True, verbose_name='Authority Name')),
                ('pdf', models.FileField(blank=True, help_text='Put here a brief document defining Authority regulations.', null=True, upload_to='pdf', verbose_name='Authority Report')),
            ],
            options={
                'verbose_name': 'Regulatroy Authority',
                'verbose_name_plural': 'Authorities',
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='It is the name of country or geographical location for example India, European Union etc.', max_length=255, unique=True, verbose_name='Country Name')),
                ('note', models.TextField(blank=True, help_text='Put any information here that you could not put inside the pdf report.', null=True, verbose_name='Note defining country regulation')),
                ('pdf', models.FileField(blank=True, help_text='Put here a brief document defining country regulations.', null=True, upload_to='pdf', verbose_name='Country Report')),
                ('authorities', models.ManyToManyField(related_query_name='Regulatory authorities', to='ui.Authorities')),
            ],
            options={
                'verbose_name': 'Country',
                'verbose_name_plural': 'Countries',
            },
        ),
        migrations.CreateModel(
            name='Priorities',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='It is the Priority Keyword given by ITC system. ex: Mandatory, Monitoring', max_length=255, unique=True, verbose_name='Priority')),
                ('definition', models.TextField(blank=True, help_text='Put what exactly do you mean by this keyword', null=True, verbose_name='Definition of the keyword')),
            ],
            options={
                'verbose_name': 'Priority Keyword',
                'verbose_name_plural': 'Priority Keywords defined by research team',
            },
        ),
        migrations.CreateModel(
            name='Productcategories',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='It is the name of product category for example Fruit, Grains etc.', max_length=255, unique=True, verbose_name='Category Name')),
            ],
            options={
                'verbose_name': 'Product Category',
                'verbose_name_plural': 'Product Categories',
            },
        ),
        migrations.CreateModel(
            name='Typesofparameter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='It is the name of type of parameter for example Pesticide, General etc.', max_length=255, unique=True, verbose_name='Parameter Type')),
            ],
            options={
                'verbose_name': 'Type of Parameter',
                'verbose_name_plural': 'Parameter Types',
            },
        ),
        migrations.CreateModel(
            name='Typesofproduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='It is the name of type of product on the basis of its finishing for example Proprietory, Processed etc.', max_length=255, unique=True, verbose_name='Product Type')),
            ],
            options={
                'verbose_name': 'Type of Product',
                'verbose_name_plural': 'Product Types',
            },
        ),
        migrations.CreateModel(
            name='Products',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='It is the name of product for example Wheat, Chilli etc.', max_length=255, unique=True, verbose_name='Product Name')),
                ('categoryofproduct', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_query_name='Category of Product', to='ui.Productcategories', to_field='name', verbose_name='Food category of Product')),
                ('typeofproduct', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_query_name='Type of Product', to='ui.Typesofproduct', to_field='name', verbose_name='Type of Product')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
            },
        ),
        migrations.CreateModel(
            name='Parameters',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='It is the name of Parameter given by ITC system. Do not put any general names or parameter defintions here. Ex: Moisture, Ash etc.', max_length=255, unique=True, verbose_name='Parameter Name')),
                ('typeofparameter', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_query_name='Type of Parameter', to='ui.Typesofparameter', to_field='name', verbose_name='Type of Parameter')),
            ],
            options={
                'verbose_name': 'Parameter',
                'verbose_name_plural': 'Parameters',
            },
        ),
        migrations.CreateModel(
            name='Officialdefinitionsofproduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('definition', models.TextField(blank=True, help_text='Put the offical definition or any other descriptive qualities if defined by Authority for this product.', null=True, verbose_name='Definition product by authority')),
                ('pubishedcommodity', models.TextField(blank=True, help_text='Put the published name of product defined by Authority for this product. Try to involve categories and subcategories as well if given.', null=True, verbose_name='Published name of product')),
                ('authority', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ui.Authorities')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ui.Products')),
            ],
            options={
                'verbose_name': 'Product as defined by authority',
                'verbose_name_plural': 'Product Definitions by Authorities',
            },
        ),
        migrations.CreateModel(
            name='Officialdefinitionsofparameter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('definition', models.TextField(blank=True, help_text='Put the offical definition or any other descriptive qualities if defined by Authority for this parameter. Any scientific family can also be mentioned if defined by the authority.', null=True, verbose_name='Parameter Definition by authority')),
                ('authority', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ui.Authorities')),
                ('parameter', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ui.Parameters')),
            ],
            options={
                'verbose_name': 'Parameter as defined by authority',
                'verbose_name_plural': 'Parameter definitions by Authorities',
            },
        ),
        migrations.AddField(
            model_name='authorities',
            name='parameters',
            field=models.ManyToManyField(through='ui.Officialdefinitionsofparameter', to='ui.Parameters'),
        ),
        migrations.AddField(
            model_name='authorities',
            name='products',
            field=models.ManyToManyField(through='ui.Officialdefinitionsofproduct', to='ui.Products'),
        ),
        migrations.CreateModel(
            name='Maintable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('maximum_limit', models.FloatField(blank=True, max_length=10, null=True, verbose_name='Maximum Limit')),
                ('minimum_limit', models.FloatField(blank=True, max_length=10, null=True, verbose_name='Minimum Limit')),
                ('unit', models.CharField(blank=True, max_length=20, null=True, verbose_name='Unit')),
                ('effective_date', models.DateField(blank=True, null=True, verbose_name='Effective Date')),
                ('expire_date', models.DateField(blank=True, null=True, verbose_name='Expire Date')),
                ('status_of_expire_date', models.CharField(blank=True, choices=[('Proposed', 'Proposed'), ('Fixed', 'Fixed')], default=None, max_length=8, null=True, verbose_name='Is Expire date "Fixed" or "Proposed"')),
                ('import_tolerance', models.CharField(choices=[('YES', 'YES'), ('NO', 'NO')], default='NO', max_length=3, verbose_name='Import Tolerance?')),
                ('principal_entry', models.CharField(choices=[('YES', 'YES'), ('NO', 'NO')], default='YES', help_text='Mark Yes if you think that this limit is very commonly followed for given country and product and should be shown to users by default.', max_length=3, verbose_name='Is this a Principal entry?')),
                ('info_on_regulations', models.TextField(blank=True, help_text='Put any official rule, article number, document name, where you think the change will occur so you could directly search and track its entries. ', null=True, verbose_name='Regulation information for given limit')),
                ('source_document', models.TextField(blank=True, null=True, verbose_name='Source Document information(or Link)')),
                ('date_of_publishing_source', models.DateField(blank=True, null=True, verbose_name='Date of Publishing Source')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='Remarks')),
                ('authority_name', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ui.Authorities', to_field='name', verbose_name='Regulatory Authority')),
                ('country_name', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ui.Country', to_field='name', verbose_name='Country')),
                ('parameter_name', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ui.Parameters', to_field='name', verbose_name='Parameter')),
                ('priority', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ui.Priorities', to_field='name', verbose_name='Priority')),
                ('product_name', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ui.Products', to_field='name', verbose_name='Product')),
            ],
            options={
                'verbose_name': 'Main table entry',
                'verbose_name_plural': 'Main Table',
                'unique_together': {('country_name', 'product_name', 'parameter_name', 'authority_name', 'priority')},
            },
        ),
    ]
